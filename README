cletus
======

Installation
------------

Installation is easy:
  python setup.py install

Alternatively, you may prefer to install it into a virtual environment:
  mkdir cletus
  virtualenv --clear --distribute cletus
  pip -E cletus install -e git+ssh://git@uzeweb.com/radiac-projects/cletus.git#egg=cletus


Running the server
------------------

To run a server:
  cletus run

If you installed it into a virtual environment, remember to switch into that first:
  cd cletus
  source bin/activate
  cletus run


Running the server as a daemon
------------------------------

The recommended method is using ``upstart``:
  http://upstart.ubuntu.com/
  
Chances are your linux distribution will at least support it, if not already
have it installed.

Create an upstart script 'cletus', (probably in /etc/init/ or /etc/event.d/):

  description "Cletus server for localhost:9000"
  start on runlevel [2345]
  stop on runlevel [!2345]
  respawn
  exec /usr/bin/cletus run

If you installed into a virtual environment, change the exec path to cletus:
  exec /path/to/cletus/bin/cletus

Customising this should be obvious; just change the description and exec lines
to reflect what you're doing.

You can then start and stop the process using upstart:
  sudo start cletus
  sudo stop cletus


Developer Overview
------------------

The cletus script in bin calls cletus.cli.run, which starts a core.Manager:

    manager = cletus.core.Manager(settings)
    manager.start()

That will initialise commands and plugins, then create a connection.Server,
which will in turn create each user.User as they connect.


self.settings = manager.settings;

The code is designed so that most changes can be achieved by creating plugins
or by subclassing Manager. For example, to add support for rooms you would make
a 'rooms' plugin, set the property on the user's plugin data, then subclass
Manager to make it check for rooms when listing or sending to users.


Writing plugins
---------------

Although plugins are in separate files, they share scope - a function defined
in one can be accessed in another.

They are loaded in alphanumeric order, depth-first; that is 10-mud/20-comm.py
will be loaded before 10-zoo.py.

The following variables will be available in the scope:

    manager     The manager object
    events      The events registry (manager.events)
    @listen     Decorator for functions which need to listen to events
    InputProcessor  The InputProcessor class


Events
------

Event objects have the following attributes:
    name        Name of the event
    registry    The EventRegistry which raised this
    manager     The Manager instance
    stop()      If a handler calls this, no more handlers will be called

Events may also add their own attributes to the Event object - see below.

Events:

init            Called once all plugins have loaded
reload          Called when plugins are about to be reloaded (followed by init)
start           Server initialised but not yet listening

connect         A user has connected
                    user        User object
disconnect      A user has disconnected
                    user        User object
input           A user has sent input
                    user        User object
                    input       Line of input from user
poll            Called each server loop
shutdown        The server is about to shut down


Changelog
---------
0.0.1       2012-01-13
            Feature: Initial release of new version in python
0.1.0       2012-01-15
            Feature: Events, plugins
            Feature: IRC- and MUD-style chat
            Internal: Moved all non-core code into plugins

Known bugs
----------
None


Roadmap
-------
0.2.0       Persistent storage for user data
                Collect from user._data, or event?
                Non-persistent user._data storage using prefix or different store?
            Logins
0.3.0       Multiple room support
0.3.1       Inventory and items
