cletus
======

Installation
------------

This has been tested on Python 2.7, but should work with 2.4.

Installation is easy:
    pip -E cletus install -e git+ssh://git@uzeweb.com/radiac-projects/cletus.git#egg=cletus

Alternatively, you may prefer to install it into a virtual environment:
    mkdir cletus
    virtualenv --clear --distribute cletus
    pip -E cletus install -e git+ssh://git@uzeweb.com/radiac-projects/cletus.git#egg=cletus

If you're missing virtualenv and pip, install them in ubuntu with:
    apt-get install python-setuptools python-dev build-essential
    easy_install -U pip
    pip install -U virtualenv


Running the server
------------------

To run a bare server:
    cletus

That will let you connect. Load some plugins so it's a bit more useful:
    cletus --plugins=cletus/src/plugins/irc.list

See [[#Loading plugins]] for more information on what to load.

If you installed it into a virtual environment, remember to switch into that first:
    cd cletus
    source bin/activate
    cletus ARGS

You could also run it by specifying the full path to the command:
    cletus/bin/cletus ARGS


Running the server as a daemon
------------------------------

The recommended method is using ``upstart``:
    http://upstart.ubuntu.com/
  
Chances are your linux distribution will at least support it, if not already
have it installed.

Your upstart script should be:

    description "Cletus server for localhost:9000"
    start on runlevel [2345]
    stop on runlevel [!2345]
    respawn
    exec /usr/bin/cletus

If your version of upstart supports user jobs it would be best to put it there,
otherwise if it's in ''/etc/init/'' or ''/etc/event.d/'' you will probably want
to change user to avoid running it as root (replace ARGS with cletus args):
    exec start-stop-daemon --start --chuid USER --exec /usr/bin/cletus -- ARGS

If you installed into a virtual environment, change the exec path to cletus:
    exec /path/to/cletus/bin/cletus

Customising this should be obvious; just change the description and exec lines
to reflect what you're doing.

You can then start and stop the process using upstart:
    sudo start cletus
    sudo stop cletus


Loading plugins
---------------

On the command line, you can specify a .py plugin, a .list file, or a dir. In a
settings file you can do the same, or provide a list directly.

A .list file is a text file with a .list suffix. It should contain a list of
dirs, .py plugins or .list files, relative to the path of the list file, one on
each line. It can contain empty lines, and lines which start with # will be
ignored.

There are two default plugin lists provided in plugin-lib:

    irc.list    A basic IRC-style chatroom:
                    Unauthenticated login
                    Single room
                    IRC-style chat and commands
    talker.list A basic talker:
                    Authenticated login
                    Single room
                    Talker-style chat and commands

The talker will be given multiple room support at a later date. There will also
be a third list, mud.list, which will function as a basic mud. See the roadmap
for more details.


Developer Overview
------------------

The cletus script in bin calls cletus.cli.run, which starts a core.Manager:

    manager = cletus.core.Manager(settings)
    manager.start()

That will initialise commands and plugins, then create a connection.Server,
which will in turn create each user.User as they connect.

The code is designed so that most changes can be achieved by creating plugins
or by subclassing Manager. For example, to add support for rooms you would make
a 'rooms' plugin, set the property on the user's plugin data, then subclass
Manager to make it check for rooms when listing or sending to users.


Writing plugins
---------------

Although plugins are in separate files, they share scope - a function defined
in one can be accessed in another.

They are loaded in alphanumeric order, depth-first; that is 10-mud/20-comm.py
will be loaded before 10-zoo.py.

The following variables will be available in the scope:

    manager     The manager object
    events      The events registry (manager.events)
    @listen     Decorator for functions which need to listen to events
    InputProcessor  The InputProcessor class


Events
------

Event objects have the following attributes:
    name        Name of the event
    registry    The EventRegistry which raised this
    manager     The Manager instance
    stop()      If a handler calls this, no more handlers will be called

Events may also add their own attributes to the Event object - see below.

Events:

init            Called once all plugins have loaded
reload          Called when plugins are about to be reloaded (followed by init)
start           Server initialised but not yet listening

connect         A user has connected
                    user        User object
disconnect      A user has disconnected
                    user        User object
input           A user has sent input
                    user        User object
                    input       Line of input from user
poll            Called each server loop
shutdown        The server is about to shut down


Changelog
---------
0.0.1       2012-01-13
            Feature: Initial release of new version in python
            
0.1.0       2012-01-15
            Feature: Events, plugins
            Feature: IRC- and MUD-style chat
            Internal: Moved all non-core code into plugins

0.1.1       2012-01-16
            Internal: Rearranged plugin files to improve clarity
            Internal: Plugin lists


Known bugs
----------
Since       Fix due
-           -           -


Roadmap
-------
0.1.2       Specify custom settings files on the command line
0.2.0       Account and login support
            Persistent storage for user._store dict
0.3.0       Proper telnet negotiation
0.4.0       Multiple rooms
0.4.1       Inventory and items
0.4.2       Item-specific commands
0.4.3       Basic health, skills and combat
